{"name":"Quelpa","tagline":"Your personal local Emacs Lisp Package Archive (ELPA) with packages built on-the-fly directly from source","body":"# quelpa\r\n\r\nYour personal local Emacs Lisp Package Archive (ELPA) with packages built on-the-fly directly from source.\r\n\r\n**Important: quelpa requires at least Emacs 24.3**\r\n\r\nIf you want to help with the development of quelpa, check the [issues.](https://github.com/quelpa/quelpa/issues) The more people we get to work on quelpa, the better :)\r\n\r\n## Overview\r\n\r\n`quelpa` wants to bring the power over your Emacs packages back to you. The [melpa](http://melpa.milkbox.net/packages/) archive is great because it has so many packages but why should an external build service control what packages you can install?\r\n\r\nRather `quelpa` uses recipes in the [melpa-format](https://github.com/milkypostman/melpa#recipe-format) to build the packages you want from the source code and installs them to a directory-based local package archive that we call `quelpa`.\r\n\r\nYou can build and install packages from all the sources the melpa build script (`package-build`) supports:\r\n\r\n-   git: <http://git-scm.com/>\r\n-   github: <https://github.com/>\r\n-   bazaar (bzr): <http://bazaar.canonical.com/en/>\r\n-   mercurial (hg): <http://mercurial.selenic.com/>\r\n-   subversion (svn): <http://subversion.apache.org/>\r\n-   cvs: <http://www.nongnu.org/cvs/>\r\n-   darcs: <http://darcs.net/>\r\n-   Emacs Wiki (wiki): <http://www.emacswiki.org/>\r\n\r\n## Installation\r\n\r\nFirst `quelpa` needs to be bootstrapped, that means melpa's `package-build` has to be installed, then `quelpa` itself.\r\n\r\nTo bootstrap `quelpa`  use this code:\r\n\r\n```lisp\r\n    (unless (require 'quelpa nil t)\r\n      (with-temp-buffer\r\n        (url-insert-file-contents \"https://raw.github.com/quelpa/quelpa/master/bootstrap.el\")\r\n        (eval-buffer)))\r\n```\r\n\r\nTo bootstrap `quelpa` now just evaluate this expression in your `*scratch*` buffer. Add it to your Emacs init file to make sure `quelpa` will be installed automatically if necessary.\r\n\r\n## Usage\r\n\r\nCool. Now that we are all setup enjoy the ride.\r\n\r\nNavigate to <http://melpa.milkbox.net/> and click on the recipe symbol of a package you'd like to install. Or go directly to <https://github.com/milkypostman/melpa/blob/master/recipes/> and choose a recipe there.\r\n\r\nIn this example I use `company`, the alternative auto-completion framework at <https://github.com/milkypostman/melpa/blob/master/recipes/company>:\r\n\r\n```lisp\r\n    (company :repo \"company-mode/company-mode\" :fetcher github)\r\n```\r\n\r\nNow installing `company` from the Github source with `quelpa` is pretty simple:\r\n\r\n```lisp\r\n    (quelpa '(company :repo \"company-mode/company-mode\" :fetcher github))\r\n```\r\n\r\nJust take care that you put a quote before the recipe. Running this expression will fetch the source code from Github, build a package in elpa format and put it into the local `quelpa`  packages directory `~/.emacs.d/quelpa/packages`. The package is installed via the normal `package-install` command behind the scenes.\r\n\r\nYou can also use the package management interface with `quelpa` . Just start `M-x list-packages` and work with your packages as you normally do.\r\n\r\nThat's currently all folks. More bling to come!\r\n\r\n## Why \"quelpa\"?\r\n\r\nGerman `Quelle` means `source`, `Quellcode` means `source code` and `ELPA` is short for Emacs Lisp Package Archive, you get the idea. So `quelpa` is your package archive with packages built from source.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}